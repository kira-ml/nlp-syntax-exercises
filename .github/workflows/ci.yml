name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install lightweight dependencies first
        pip install pytest black isort flake8
        # Install core dependencies with timeout protection
        timeout 300 pip install numpy || echo "NumPy installation timed out"
        timeout 600 pip install -r requirements.txt || echo "Some requirements failed - continuing"
        pip install -r requirements-dev.txt || echo "Dev requirements partially failed"
        # Download required NLTK data (with error handling)
        python -c "import nltk; nltk.download('punkt')" || echo "NLTK punkt download failed"
        # Download required spaCy model (with error handling)  
        python -m spacy download en_core_web_sm || echo "spaCy model download failed"
      timeout-minutes: 15
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=.git,__pycache__,build,dist,nlp-env || echo "Critical flake8 errors found"
        # Exit-zero treats all errors as warnings (relaxed for initial publish)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=.git,__pycache__,build,dist,nlp-env
      continue-on-error: true
    
    - name: Check code formatting with black
      run: |
        black --check --diff . --exclude="/(\.git|__pycache__|build|dist)/"
      continue-on-error: true  # Allow formatting issues for initial publish
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . --skip-glob="*/__pycache__/*"
      continue-on-error: true  # Allow import sorting issues for initial publish
    
    - name: Test with pytest
      run: |
        pytest tests/ --verbose
      continue-on-error: true  # Allow tests to fail initially while building exercises
      
    - name: Check import syntax of all Python files
      run: |
        # Check that all Python files can be imported (syntax check)
        find . -name "*.py" -not -path "./.git/*" -not -path "./nlp-env/*" -not -path "./__pycache__/*" | while read file; do
          echo "Checking syntax: $file"
          python -m py_compile "$file" || echo "Warning: $file has syntax issues"
        done
      continue-on-error: true
